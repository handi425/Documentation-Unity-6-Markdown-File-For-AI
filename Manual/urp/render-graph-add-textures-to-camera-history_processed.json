{
  "path": "docManual\\urp\\render-graph-add-textures-to-camera-history.html",
  "chunks": [
    "Unity - Manual: Add textures to the camera history Manual Scripting API unity.com Version: Unity 6 (6000.0) Supported Legacy Language : English English 中文 日本語 한국어 Unity Manual Version: Unity 6 Select a different version Language : English English 中文 日本語 한국어 Rendering Render pipelines Using the Universal Render Pipeline Custom rendering and post-processing in URP Render graph system in URP Frame data in the render graph system in URP Add textures to the camera history Get data from previous frames in URP Get the current framebuffer from GPU memory in URP Add textures to the camera history To add your own texture to the camera A component which creates an image of a particular viewpoint in your scene. The output is either drawn to the screen or captured as a texture. More info See in Glossary history and read the data in later frames, create a camera history type to store the texture between frames. Create a camera history type Follow these steps: Create a class that inherits from",
    "CameraHistoryItem . For example: public class ExampleHistoryType : CameraHistoryItem { ... } In the class, add an id for the camera history system. For example: private int uniqueId; The id represents the complete history of one texture, including the current and previous frames. You can also add any other data you need, for example a texture descriptor you need to store between frames. Override the OnCreate method. In the method, call the OnCreate method of the parent class, and generate the unique id. For example: public override void OnCreate(BufferedRTHandleSystem owner, uint typeId) { // Call the OnCreate method of the parent class base.OnCreate(owner, typeId); // Generate the unique id uniqueId = MakeId(0); } Create public properties for the current and previous textures, so that render passes can access them. For example: public RTHandle currentTexture => GetCurrentFrameRT(uniqueId); public RTHandle previousTexture => GetPreviousFrameRT(uniqueId); Allocate memory for the texture.",
    "For example: // Allocate 2 textures using a texture descriptor, assign them to the uniqueId, and give them a name. AllocHistoryFrameRT(uniqueId, 2, ref textureDescriptor, \"ExampleHistoryTexture\"); You might also need to reallocate memory each frame if a render pass writes a texture with a different size or format. Write to the texture To write to the texture you created, follow these steps: To request access to the texture in a ScriptableRenderPass class, use the RequestAccess API with your camera history type. For example: cameraData.historyManager.RequestAccess<ExampleHistoryType>(); Get the texture for the current frame for writing, and convert it to a handle the render graph system can use. For example: // Get the textures ExampleHistoryType history = cameraData.historyManager.GetHistoryForWrite<ExampleHistoryType>(); // Get the texture for the current frame, using the unique id RTHandle historyTexture = history?.currentTexture(theUniqueid); // Convert the texture into a handle the",
    "render graph system can use historyTexture = renderGraph.ImportTexture(historyTexture); You can then write to the texture in your render pass. For more information, refer to Using textures . Read from the texture To read from the texture, use the RequestAccess API with the camera history type you created. You must write to the texture before you read from it. For more information, refer to Get data from previous frames . Example The following is an example of a camera history type. public class ExampleHistoryType : CameraHistoryItem { private int m_Id; // Add a descriptor for the size and format of the texture. private RenderTextureDescriptor m_Descriptor; // Add a hash key to track changes to the descriptor. private Hash128 m_DescKey; public override void OnCreate(BufferedRTHandleSystem owner, uint typeId) { base.OnCreate(owner, typeId); m_Id = MakeId(0); } public RTHandle currentTexture => return GetCurrentFrameRT(m_Id); public RTHandle previousTexture => return",
    "GetPreviousFrameRT(m_Id); // The render pass calls the Update method every frame, to initialize, update, or dispose of the textures. public void Update(RenderTextureDescriptor textureDescriptor) { // Dispose of the textures if the memory needs to be reallocated. if (m_DescKey != Hash128.Compute(ref textureDescriptor)) ReleaseHistoryFrameRT(m_Id); // Allocate the memory for the textures if it's not already allocated. if (currentTexture == null) { AllocHistoryFrameRT(m_Id, 2, ref textureDescriptor, \"HistoryTexture\"); // Store the descriptor and hash key for future changes. m_Descriptor = textureDescriptor; m_DescKey = Hash128.Compute(ref textureDescriptor); } } } The following is an example of a render pass that writes to the texture. class WriteToHistoryTexture : ScriptableRenderPass { private class PassData { internal Material material; } public override void RecordRenderGraph(RenderGraph renderGraph, ContextContainer frameData) { var cameraData = frameData.Get<UniversalCameraData>();",
    "cameraData.historyManager.RequestAccess<ExampleHistory>(); var history = cameraData.historyManager.GetHistoryForWrite<ExampleHistory>(); if (history != null) { // Call the Update method of the camera history type. history.Update(cameraData.cameraTargetDescriptor); using (var builder = renderGraph.AddRasterRenderPass<PassData>(\"Write to history texture\", out var passData)) { UniversalResourceData resourceData = frameData.Get<UniversalResourceData>(); RTHandle historyTexture = history?.currentTexture(multipassId); // Set the render graph to render to the history texture. builder.SetRenderAttachment(renderGraph.ImportTexture(historyTexture), 0, AccessFlags.Write); passData.material = m_Material; builder.SetRenderFunc(static (PassData data, RasterGraphContext context) => { // Draw a triangle to the history texture context.cmd.DrawProcedural(Matrix4x4.identity, data.material, 0, MeshTopology.Triangles, 3, 1); }); } } } } Get data from previous frames in URP Get the current framebuffer from",
    "GPU memory in URP Copyright ©2005-2025 Unity Technologies. All rights reserved. Built from 6000.0.36f1 (02b661dc617c). Built on: 2025-01-14. Tutorials Community Answers Knowledge Base Forums Asset Store Terms of use Legal Privacy Policy Cookies Do Not Sell or Share My Personal Information Your Privacy Choices (Cookie Settings)"
  ]
}